directive @defer(if: Boolean! = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @stream(if: Boolean! = true, initialCount: Int = 0, label: String) on FIELD

interface ConsoleEvent implements Event & TestExecutionEvent {
  at: DateTime!
  testExecution: TestExecution!
}

input ConsoleEventFilterInput {
  logLevel: [ConsoleLogLevel!]
  logSearch: String
}

type ConsoleLogEvent implements ConsoleEvent & Event & InstantaneousEvent & TestExecutionEvent {
  at: DateTime!
  logLevel: ConsoleLogLevel!
  message: String!
  testExecution: TestExecution!
}

"""
Represents the severity of the log, as according to the specification:

See:
- https://console.spec.whatwg.org/#loglevel-severity
"""
enum ConsoleLogLevel {
  ERROR
  INFO
  LOG
  WARN
}

type Cookie {
  domain: String
  expires: String
  httpOnly: Boolean!
  name: String!
  path: String
  secure: Boolean!
  value: String!
}

scalar Cursor

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface Event {
  at: DateTime!
}

interface HttpBody {
  data: String!
  encoding: String
  mimeType: String!
  size: Int!
}

enum HttpHeaderOrderBy {
  """The headers will be ordered alphabetically in a case-insensitive way"""
  ALPHABETICAL

  """The headers will be ordered as they were transmitted over the wire"""
  WIRE
}

input HttpHeaderOrderInput {
  by: HttpHeaderOrderBy!
  direction: OrderDirection!
}

type HttpHeaders {
  size: Int!
  values(order: HttpHeaderOrderInput!): [KeyValuePair!]!
}

type HttpNetworkEvent implements Event & IntervalEvent & NetworkEvent & TestExecutionEvent {
  at: DateTime!
  id: ID!
  initiator: HttpNetworkEventInitiator!
  request: HttpNetworkRequest!
  resourceType: String
  response: HttpNetworkResponse!
  testExecution: TestExecution!
  timings: HttpNetworkTimings!
  until: DateTime!
}

type HttpNetworkEventInitiator {
  lineNumber: Int
  origin: String
}

enum HttpNetworkEventResourceType {
  DOCUMENT
  FONT
  IMAGE
  OTHER
  SCRIPT
  STYLESHEET
  XHR
}

type HttpNetworkRequest {
  body: HttpRequestBody
  cookies: [Cookie]!
  headers: HttpHeaders!
  httpVersion: String!
  method: String!
  queryString: [KeyValuePair!]!
  url: HttpNetworkRequestUrl!
}

type HttpNetworkRequestUrl {
  nonKeyValueQueryString: String
  url: String!
}

type HttpNetworkResponse {
  body: HttpResponseBody!
  cookies: [Cookie!]!
  headers: HttpHeaders!
  redirectURL: String!
  status: Int!
  statusText: String!
  transferSize: Int!
}

type HttpNetworkTimings {
  blocked: NetworkEventTiming!
  connect: NetworkEventTiming!
  queued: NetworkEventTiming!
  receive: NetworkEventTiming!
  send: NetworkEventTiming!
  ssl: NetworkEventTiming!
  wait: NetworkEventTiming!
}

type HttpRequestBody implements HttpBody {
  data: String!
  encoding: String
  mimeType: String!
  size: Int!
}

type HttpResponseBody implements HttpBody {
  chunks: [HttpResponseBodyChunk!]!
  data: String!
  encoding: String
  mimeType: String!
  size: Int!
}

type HttpResponseBodyChunk implements Event & InstantaneousEvent {
  at: DateTime!
  data: String!
  size: Int!
}

interface InstantaneousEvent implements Event {
  at: DateTime!
}

interface IntervalEvent implements Event {
  at: DateTime!
  until: DateTime!
}

type KeyValuePair {
  key: String!
  value: String!
}

interface NetworkEvent implements Event & IntervalEvent {
  at: DateTime!
  id: ID!
  until: DateTime!
}

input NetworkEventFilterInput {
  resourceType: [HttpNetworkEventResourceType!]
  status: NetworkEventResponseStatusFilterInput
  urlSearch: String
}

input NetworkEventResponseStatusFilterInput {
  gte: Int
  lte: Int
}

type NetworkEventTiming implements Event & IntervalEvent {
  at: DateTime!
  until: DateTime!
}

"""
Represents a Node according to the Global Object Identification spec.

See https://graphql.org/learn/global-object-identification/
"""
interface Node {
  id: ID!
}

enum OrderDirection {
  ASCENDING
  DESCENDING
}

"""
The PageInfo type as specified in The Relay Connection Spec.

See:
- https://graphql.org/learn/pagination/
- https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
}

type Query {
  node(id: ID!): Node
  test: Boolean!
  testExecution(id: ID!): TestExecution
}

type TestExecution implements Event & IntervalEvent & Node {
  at: DateTime!
  events(after: Cursor, filter: TestExecutionEventFilterInput, first: Int): TestExecutionEventConnection!
  id: ID!
  until: DateTime!
}

interface TestExecutionEvent implements Event {
  at: DateTime!
  testExecution: TestExecution!
}

"""
Represents the connection to TestExecutionEvents

See:
- https://relay.dev/graphql/connections.htm#sec-Connection-Types
"""
type TestExecutionEventConnection {
  edges: [TestExecutionEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents and Edge to the TestExecution Node.

See:
- https://relay.dev/graphql/connections.htm#sec-Edge-Types
"""
type TestExecutionEventEdge {
  cursor: Cursor!
  node: TestExecutionEvent!
}

input TestExecutionEventFilterInput {
  consoleFilter: ConsoleEventFilterInput
  networkFilter: NetworkEventFilterInput
  type: [TestExecutionEventType!]
}

enum TestExecutionEventType {
  CONSOLE
  NETWORK
}