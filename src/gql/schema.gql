directive @defer(if: Boolean! = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @stream(if: Boolean! = true, initialCount: Int = 0, label: String) on FIELD

union BrowserVersion = ChromiumVersion

"""See https://www.chromium.org/developers/version-numbers/"""
type ChromiumVersion {
  build: Int!
  major: Int!
  minor: Int!
  patch: Int!
}

type CommandChainEvent implements Event & IntervalEvent & TestExecutionEvent {
  at: DateTime!
  commands: CommandEventConnection!
  testExecution: TestExecution!
  until: DateTime!
}

type CommandChainEventConnection {
  edges: [CommandChainEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CommandChainEventEdge {
  cursor: Cursor!
  node: CommandChainEvent!
}

type CommandEvent implements Event & IntervalEvent & Node & TestExecutionEvent {
  at: DateTime!
  description: String!
  error: CommandEventError
  id: ID!
  name: String!
  status: CommandEventStatus!
  testExecution: TestExecution!
  until: DateTime!
}

type CommandEventConnection {
  edges: [CommandEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CommandEventEdge {
  cursor: Cursor!
  node: CommandEvent!
}

type CommandEventError {
  message: String!
  stackTrace: String!
  type: String!
}

input CommandEventFilterInput {
  status: [CommandEventStatus!]
}

enum CommandEventStatus {
  FAILED
  SUCCESS
}

interface ConsoleEvent implements Event & TestExecutionEvent {
  at: DateTime!
  testExecution: TestExecution!
}

input ConsoleEventFilterInput {
  logLevel: [ConsoleLogLevel!]
  logSearch: String
}

type ConsoleLogEvent implements ConsoleEvent & Event & InstantaneousEvent & TestExecutionEvent {
  at: DateTime!
  logLevel: ConsoleLogLevel!
  message: String!
  testExecution: TestExecution!
}

"""
Represents the severity of the log, as according to the specification:

See:
- https://console.spec.whatwg.org/#loglevel-severity
"""
enum ConsoleLogLevel {
  ERROR
  INFO
  LOG
  WARN
}

type Cookie {
  domain: String
  expires: String
  httpOnly: Boolean!
  name: String!
  path: String
  secure: Boolean!
  value: String!
}

scalar Cursor

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface Event {
  at: DateTime!
}

enum GherkinStepKeyword {
  AND
  BUT
  GIVEN
  THEN
  WHEN
}

interface GitActor {
  email: String!
  name: String!
}

interface GitBranch {
  name: String!
}

enum GitCommitIdType {
  LONG
  SHORT
}

type GitHubActor implements GitActor {
  email: String!
  name: String!
  user: GitHubUser
}

type GitHubBranch implements GitBranch {
  name: String!
  url: URL!
}

type GitHubOrganization {
  name: String!
  slug: String
  url: URL!
}

type GitHubRepository implements GitRepository & SourceCodeManagementRepository {
  _unused: Boolean!
  name: String!
  owner: GitHubRepositoryOwner!
  url: URL!
}

type GitHubRepositoryOwner {
  name: String!
  url: URL!
}

type GitHubRevision implements GitRevision & SourceCodeManagementRevision {
  author: GitHubActor!
  branch: GitHubBranch
  commitId(type: GitCommitIdType! = LONG): String!
  committer: GitHubActor!
  repository: GitHubRepository!
  url: URL!
}

type GitHubUser {
  avatar: URL
  name: String!
  url: URL!
  username: String!
}

interface GitRepository implements SourceCodeManagementRepository {
  _unused: Boolean!
}

interface GitRevision implements SourceCodeManagementRevision {
  author: GitActor!
  branch: GitBranch
  commitId(type: GitCommitIdType! = LONG): String!
  committer: GitActor!
  repository: GitRepository!
}

interface HttpBody {
  data: String!
  encoding: String
  mimeType: String!
  size: Int!
}

enum HttpHeaderOrderBy {
  """The headers will be ordered alphabetically in a case-insensitive way"""
  ALPHABETICAL

  """The headers will be ordered as they were transmitted over the wire"""
  WIRE
}

input HttpHeaderOrderInput {
  by: HttpHeaderOrderBy!
  direction: OrderDirection!
}

type HttpHeaders {
  size: Int!
  values(order: HttpHeaderOrderInput!): [KeyValuePair!]!
}

type HttpNetworkEvent implements Event & IntervalEvent & NetworkEvent & TestExecutionEvent {
  at: DateTime!
  id: ID!
  initiator: HttpNetworkEventInitiator!
  request: HttpNetworkRequest!
  resourceType: String
  response: HttpNetworkResponse!
  testExecution: TestExecution!
  timings: HttpNetworkTimings!
  until: DateTime!
}

type HttpNetworkEventInitiator {
  lineNumber: Int
  origin: String
}

enum HttpNetworkEventResourceType {
  DOCUMENT
  FONT
  IMAGE
  OTHER
  SCRIPT
  STYLESHEET
  XHR
}

type HttpNetworkRequest {
  body: HttpRequestBody
  cookies: [Cookie]!
  headers: HttpHeaders!
  httpVersion: String!
  method: String!
  queryString: [KeyValuePair!]!
  url: HttpNetworkRequestUrl!
}

type HttpNetworkRequestUrl {
  nonKeyValueQueryString: String
  url: String!
}

type HttpNetworkResponse {
  body: HttpResponseBody!
  cookies: [Cookie!]!
  headers: HttpHeaders!
  redirectURL: String!
  status: Int!
  statusText: String!
  transferSize: Int!
}

type HttpNetworkTimings {
  blocked: NetworkEventTiming!
  connect: NetworkEventTiming!
  queued: NetworkEventTiming!
  receive: NetworkEventTiming!
  send: NetworkEventTiming!
  ssl: NetworkEventTiming!
  wait: NetworkEventTiming!
}

type HttpRequestBody implements HttpBody {
  data: String!
  encoding: String
  mimeType: String!
  size: Int!
}

type HttpResponseBody implements HttpBody {
  chunks: [HttpResponseBodyChunk!]!
  data: String!
  encoding: String
  mimeType: String!
  size: Int!
}

type HttpResponseBodyChunk implements Event & InstantaneousEvent {
  at: DateTime!
  data: String!
  size: Int!
}

interface InstantaneousEvent implements Event {
  at: DateTime!
}

interface IntervalEvent implements Event {
  at: DateTime!
  until: DateTime!
}

type KeyValuePair {
  key: String!
  value: String!
}

interface NetworkEvent implements Event & IntervalEvent {
  at: DateTime!
  id: ID!
  until: DateTime!
}

input NetworkEventFilterInput {
  resourceType: [HttpNetworkEventResourceType!]
  status: NetworkEventResponseStatusFilterInput
  urlSearch: String
}

input NetworkEventResponseStatusFilterInput {
  gte: Int
  lte: Int
}

type NetworkEventTiming implements Event & IntervalEvent {
  at: DateTime!
  until: DateTime!
}

"""
Represents a Node according to the Global Object Identification spec.

See https://graphql.org/learn/global-object-identification/
"""
interface Node {
  id: ID!
}

enum OrderDirection {
  ASCENDING
  DESCENDING
}

"""
The PageInfo type as specified in The Relay Connection Spec.

See:
- https://graphql.org/learn/pagination/
- https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
}

type Query {
  httpNetworkEvent(id: ID!): HttpNetworkEvent
  node(id: ID!): Node
  test: Boolean!
  testExecution(id: ID!): TestExecution
}

type ScenarioDefinition {
  description: String!
}

type ScenarioEvent implements Event & IntervalEvent & TestExecutionEvent {
  at: DateTime!
  definition: ScenarioDefinition!
  steps: StepEventConnection!
  testExecution: TestExecution!
  until: DateTime!
}

interface SourceCodeManagementRepository {
  _unused: Boolean!
}

interface SourceCodeManagementRevision {
  repository: SourceCodeManagementRepository!
}

type StepDefinition {
  description: String!
  keyword: GherkinStepKeyword!
}

type StepEvent implements Event & IntervalEvent & Node & TestExecutionEvent {
  at: DateTime!
  commandChains: CommandChainEventConnection!
  definition: StepDefinition!
  id: ID!
  status: CommandEventStatus!
  testExecution: TestExecution!
  until: DateTime!
}

type StepEventConnection {
  edges: [StepEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StepEventEdge {
  cursor: Cursor!
  node: StepEvent!
}

type TestExecution implements Event & IntervalEvent & Node {
  at: DateTime!
  environment: TestExecutionEnvironment!
  events(after: Cursor, filter: TestExecutionEventFilterInput, first: Int): TestExecutionEventConnection!
  id: ID!
  testRun: TestRun!
  until: DateTime!
}

type TestExecutionEnvironment {
  browser: BrowserVersion!
}

interface TestExecutionEvent implements Event {
  at: DateTime!
  testExecution: TestExecution!
}

"""
Represents the connection to TestExecutionEvents

See:
- https://relay.dev/graphql/connections.htm#sec-Connection-Types
"""
type TestExecutionEventConnection {
  edges: [TestExecutionEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents and Edge to the TestExecution Node.

See:
- https://relay.dev/graphql/connections.htm#sec-Edge-Types
"""
type TestExecutionEventEdge {
  cursor: Cursor!
  node: TestExecutionEvent!
}

input TestExecutionEventFilterInput {
  commandFilter: CommandEventFilterInput
  consoleFilter: ConsoleEventFilterInput
  networkFilter: NetworkEventFilterInput
  type: [TestExecutionEventType!]
}

enum TestExecutionEventType {
  """
  Returns all commands executed in the `TestExecution` flattened outside of the test layout.
  """
  COMMAND
  CONSOLE
  NETWORK

  """
  Returns all of the steps of the `TestExecution`, flattened outside of their containing `BackgroundEvent` or `ScenarioEvent`.
  """
  STEP

  """
  Returns the top-level parts of the `TestExecution`
  
  For BDD this will be `BackgroundEvent` & `ScenarioEvent`.
  For other tests, this can include `Before All`/`Before Each`/`Test`/`After Each`/`After All` parts
  """
  TEST_PART
}

type TestRun implements Node {
  id: ID!

  """This field may be null if the data was not provided for collection."""
  testCodeRevision: SourceCodeManagementRevision
}

scalar URL